// Two-way data binding library.
// https://github.com/ahabra/data-bind
// Copyright 2020 (C) Abdul Habra

!function(){const e=e=>"checkbox"===e.type,t=e=>"radio"===e.type,n=e=>"select"===e.tagName.toLowerCase(),r=e=>"value"in e,o=e=>new Set(Array.isArray(e)?e:[e]);function i(e,t){const n=e.querySelectorAll(t);return 0===n.length&&console.warn(`No elements found matching selector ${t}`),[...n]}window.bind=function({obj:l,prop:u,sel:c,attr:a,root:f}){!function({obj:e,prop:t,sel:n}){if(!e)throw"'obj' argument cannot be null or undefined.";if("string"!=typeof t||0===t.length)throw"'prop' argument must be a String defining the name a property.";if("string"!=typeof n||0===n.length)throw"'sel' argument must be a String defining a selector."}({obj:l,prop:u,sel:c});const s=l.hasOwnProperty(u)?l[u]:void 0;f=f||document;const d={get:()=>function(o,l,u){const c=i(o,l);if(0===c.length)return null;let a=c[0];if(u)return a.getAttribute(u);if(!r(a))return a.innerHTML;if(e(a))return c.filter(t=>e(t)&&t.checked).map(e=>"on"===e.value?e.name:e.value);if(n(a)){return[...a.querySelectorAll("option")].filter(e=>e.selected).map(e=>e.value)}t(a)&&(a=c.filter(t).find(e=>e.checked));return a.value}(f,c,a),set:l=>function(l,u,c,a){const f=i(l,u);if(0===f.length)return;const s=f[0];if(e(s)){const t=o(c);return void f.filter(e).forEach(e=>e.checked=t.has(e.value)||t.has(e.name))}if(n(s)){const e=o(c);return void s.querySelectorAll("option").forEach(t=>t.selected=e.has(t.value))}if(t(s))return void f.filter(t).forEach(e=>e.checked=e.value===c);f.forEach(e=>function(e,t,n){n?e.setAttribute(n,t):r(e)?e.value=t:e.innerHTML=t}(e,c,a))}(f,c,l,a),configurable:!0,enumerable:!0};Object.defineProperty(l,u,d),void 0!==s&&(console.info(`Property '${u}' already exists in object. Will override previous definition but retain old value of ${s}.`),l[u]=s)}}();